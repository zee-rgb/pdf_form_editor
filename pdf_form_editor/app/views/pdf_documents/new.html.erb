<div class="max-w-2xl mx-auto">
    <div class="md:grid md:grid-cols-3 md:gap-6">
      <div class="md:col-span-1">
        <div class="px-4 sm:px-0">
          <h3 class="text-lg font-medium leading-6 text-gray-900">Upload PDF</h3>
          <p class="mt-1 text-sm text-gray-600">
            Upload a PDF form that you need to fill out. We'll make it editable so you can add text and signatures.
          </p>
        </div>
      </div>
      <div class="mt-5 md:mt-0 md:col-span-2">
        <%= form_with model: @pdf_document, local: true, multipart: true, data: { turbo: false }, class: "shadow sm:rounded-md sm:overflow-hidden" do |form| %>
          <div class="px-4 py-5 bg-white space-y-6 sm:p-6">
            <% if @pdf_document.errors.any? %>
              <div class="rounded-md bg-red-50 p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-1 w-1 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">
                      There were <%= pluralize(@pdf_document.errors.count, "error") %> with your submission:
                    </h3>
                    <div class="mt-2 text-sm text-red-700">
                      <ul class="list-disc list-inside space-y-1">
                        <% @pdf_document.errors.full_messages.each do |message| %>
                          <li><%= message %></li>
                        <% end %>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>

            <div>
              <%= form.label :title, class: "block text-sm font-medium text-gray-700" %>
              <%= form.text_field :title,
                  placeholder: "Enter a name for this document",
                  class: "mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" %>
            </div>

            <div x-data="{ fileName: '', fileSelected: false }">
              <%= form.label :pdf_file, "PDF File", class: "block text-sm font-medium text-gray-700" %>
              <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md hover:border-gray-400 transition-colors"
                   :class="{ 'border-green-400 bg-green-50': fileSelected }">
                <div class="space-y-1 text-center">
                  <svg class="mx-auto h-12 w-12 text-gray-400" fill="currentColor" viewBox="0 0 16 16"
                       :class="{ 'text-green-500': fileSelected }">
                    <path d="M7.25 10.25a.75.75 0 0 0 1.5 0V4.56l1.22 1.22a.75.75 0 1 0 1.06-1.06l-2.5-2.5a.75.75 0 0 0-1.06 0l-2.5 2.5a.75.75 0 0 0 1.06 1.06L7.25 4.56v5.69Z"/>
                    <path d="M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z"/>
                  </svg>
                  <div class="flex text-sm text-gray-600" x-show="!fileSelected">
                    <label for="pdf_document_pdf_file" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                      <span>Upload a PDF file</span>
                      <%= form.file_field :pdf_file, accept: ".pdf", class: "sr-only",
                          "x-ref": "fileInput",
                          "@change": "fileName = $event.target.files[0]?.name || ''; fileSelected = !!$event.target.files[0]; if($event.target.files[0]) previewPDF($event.target.files[0])" %>
                    </label>
                    <p class="pl-1">or drag and drop</p>
                  </div>
                  <div x-show="fileSelected" class="text-sm font-medium text-green-600">
                    <p x-text="'âœ“ Selected: ' + fileName"></p>
                    <button type="button" @click="fileName = ''; fileSelected = false; $refs.fileInput.value = ''"
                            class="mt-1 text-xs text-gray-500 hover:text-gray-700">Change file</button>
                  </div>
                  <p class="text-xs text-gray-500">
                    PDF files up to 10MB
                  </p>
                </div>
              </div>

              <!-- PDF Preview -->
              <div x-show="fileSelected" class="mt-4">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Preview:</h4>
                <div class="border rounded-lg p-4 bg-gray-50">
                  <div id="preview-container" class="flex justify-center">
                    <canvas id="preview-canvas" class="border shadow-sm max-w-full h-auto hidden"></canvas>
                  </div>
                  <div id="preview-loading" class="text-center text-gray-600 text-sm">
                    Loading preview...
                  </div>
                  <div id="preview-error" class="text-center text-red-600 text-sm hidden">
                    Unable to preview PDF
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="px-4 py-3 bg-gray-50 text-right sm:px-6 flex justify-between items-center">
            <%= link_to "Cancel", pdf_documents_path, class: "bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
            <%= form.submit "Upload & Start Editing", class: "ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  // Load PDF.js dynamically to avoid conflicts
  function loadPDFJSForPreview() {
    return new Promise((resolve, reject) => {
      if (window.pdfjsLib && typeof window.pdfjsLib.getDocument === 'function') {
        resolve(window.pdfjsLib);
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://unpkg.com/pdfjs-dist@3.9.179/build/pdf.min.js';
      script.onload = () => {
        if (window.pdfjsLib) {
          window.pdfjsLib.GlobalWorkerOptions = {
            workerSrc: 'https://unpkg.com/pdfjs-dist@3.9.179/build/pdf.worker.min.js'
          };
          resolve(window.pdfjsLib);
        } else {
          reject(new Error('PDF.js failed to load'));
        }
      };
      script.onerror = () => reject(new Error('Failed to load PDF.js script'));
      document.head.appendChild(script);
    });
  }

  async function previewPDF(file) {
    if (!file || file.type !== 'application/pdf') return;

    const canvas = document.getElementById('preview-canvas');
    const ctx = canvas.getContext('2d');
    const errorDiv = document.getElementById('preview-error');
    const loadingDiv = document.getElementById('preview-loading');

    // Show loading, hide others
    loadingDiv.classList.remove('hidden');
    canvas.classList.add('hidden');
    errorDiv.classList.add('hidden');

    try {
      // Load PDF.js if not already loaded
      const pdfjsLib = await loadPDFJSForPreview();

      const fileReader = new FileReader();
      fileReader.onload = function(e) {
        const typedarray = new Uint8Array(e.target.result);

        pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {
          return pdf.getPage(1);
        }).then(function(page) {
          const viewport = page.getViewport({ scale: 0.5 });
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          const renderContext = {
            canvasContext: ctx,
            viewport: viewport
          };

          return page.render(renderContext).promise;
        }).then(function() {
          // Success - show canvas, hide loading
          loadingDiv.classList.add('hidden');
          canvas.classList.remove('hidden');
          errorDiv.classList.add('hidden');
        }).catch(function(error) {
          console.error('Error loading PDF preview:', error);
          // Error - show error, hide loading
          loadingDiv.classList.add('hidden');
          canvas.classList.add('hidden');
          errorDiv.classList.remove('hidden');
        });
      };

      fileReader.readAsArrayBuffer(file);
    } catch (error) {
      console.error('Error loading PDF.js for preview:', error);
      loadingDiv.classList.add('hidden');
      canvas.classList.add('hidden');
      errorDiv.classList.remove('hidden');
    }
  }
</script>
