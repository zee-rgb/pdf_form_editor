<%# Simple PDF Editor %>
<div class="flex min-h-screen bg-gray-100">
  <%# Tools Sidebar %>
  <div class="w-80 bg-white border-r shadow-sm p-6">
    <h2 class="text-lg font-bold mb-6"><%= @pdf_document.title %></h2>
    
    <%# Text Tool %>
    <div class="mb-8">
      <h3 class="font-medium mb-3">Add Text</h3>
      <input type="text" id="text-input" placeholder="Enter text" class="w-full p-2 border rounded mb-2">
      <button id="text-mode" class="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700">
        Click PDF to Add Text
      </button>
    </div>
    
    <%# Signature Tool %>
    <div class="mb-8">
      <h3 class="font-medium mb-3">Add Signature</h3>
      <button id="draw-mode" class="w-full bg-green-600 text-white p-2 rounded mb-2 hover:bg-green-700">
        Draw Signature
      </button>
      <input type="text" id="typed-sig" placeholder="Type name" class="w-full p-2 border rounded mb-2">
      <button id="type-mode" class="w-full bg-purple-600 text-white p-2 rounded hover:bg-purple-700">
        Click PDF to Add Typed Signature
      </button>
    </div>
    
    <%# Actions %>
    <div class="space-y-2">
      <%= link_to "Download PDF", download_pdf_document_path(@pdf_document), 
          class: "block w-full bg-gray-600 text-white p-2 rounded text-center hover:bg-gray-700" %>
      <%= link_to "Back to PDFs", pdf_documents_path, 
          class: "block w-full bg-gray-400 text-white p-2 rounded text-center hover:bg-gray-500" %>
    </div>
    
    <%# Status %>
    <div id="status" class="mt-4 p-2 rounded hidden"></div>
  </div>
  
  <%# PDF Viewer %>
  <div class="flex-1 p-4">
    <div id="pdf-container" class="bg-white rounded shadow-lg h-full relative">
      <% if @pdf_document.pdf_file.attached? %>
        <iframe src="<%= url_for(@pdf_document.pdf_file) %>" 
                title="PDF Document Viewer"
                class="w-full h-full border-0"></iframe>
        <div id="click-overlay" class="absolute inset-0 hidden cursor-crosshair bg-blue-500 bg-opacity-10"></div>
      <% else %>
        <div class="flex items-center justify-center h-full text-gray-500">
          No PDF attached
        </div>
      <% end %>
    </div>
  </div>
  
  <%# Draw Signature Modal %>
  <div id="signature-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg">
      <h3 class="text-lg font-bold mb-4">Draw Your Signature</h3>
      <canvas id="signature-canvas" width="400" height="150" class="border mb-4 bg-white"></canvas>
      <div class="flex gap-2">
        <button id="clear-canvas" class="px-4 py-2 bg-gray-300 rounded">Clear</button>
        <button id="cancel-signature" class="px-4 py-2 bg-red-500 text-white rounded">Cancel</button>
        <button id="use-signature" class="px-4 py-2 bg-green-600 text-white rounded">Use Signature</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const textInput = document.getElementById('text-input');
  const textMode = document.getElementById('text-mode');
  const drawMode = document.getElementById('draw-mode');
  const typeMode = document.getElementById('type-mode');
  const typedSig = document.getElementById('typed-sig');
  const clickOverlay = document.getElementById('click-overlay');
  const signatureModal = document.getElementById('signature-modal');
  const signatureCanvas = document.getElementById('signature-canvas');
  const status = document.getElementById('status');
  
  let currentMode = null;
  let isDrawing = false;
  let ctx = signatureCanvas?.getContext('2d');
  
  if (ctx) {
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.lineCap = 'round';
  }
  
  // Text mode
  textMode.addEventListener('click', function() {
    if (!textInput.value.trim()) {
      alert('Enter text first');
      return;
    }
    currentMode = 'text';
    clickOverlay.classList.remove('hidden');
    showStatus('Click on PDF to place text', 'blue');
  });
  
  // Draw signature mode
  drawMode.addEventListener('click', function() {
    signatureModal.classList.remove('hidden');
    clearCanvas();
  });
  
  // Type signature mode
  typeMode.addEventListener('click', function() {
    if (!typedSig.value.trim()) {
      alert('Enter name first');
      return;
    }
    currentMode = 'type-signature';
    clickOverlay.classList.remove('hidden');
    showStatus('Click on PDF to place typed signature', 'purple');
  });
  
  // Canvas drawing
  if (signatureCanvas) {
    signatureCanvas.addEventListener('mousedown', startDrawing);
    signatureCanvas.addEventListener('mousemove', draw);
    signatureCanvas.addEventListener('mouseup', stopDrawing);
  }
  
  function startDrawing(e) {
    isDrawing = true;
    const rect = signatureCanvas.getBoundingClientRect();
    ctx.beginPath();
    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
  }
  
  function draw(e) {
    if (!isDrawing) return;
    const rect = signatureCanvas.getBoundingClientRect();
    ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
    ctx.stroke();
  }
  
  function stopDrawing() {
    isDrawing = false;
  }
  
  function clearCanvas() {
    ctx.clearRect(0, 0, signatureCanvas.width, signatureCanvas.height);
  }
  
  // Modal controls
  document.getElementById('clear-canvas')?.addEventListener('click', clearCanvas);
  document.getElementById('cancel-signature')?.addEventListener('click', function() {
    signatureModal.classList.add('hidden');
  });
  document.getElementById('use-signature')?.addEventListener('click', function() {
    signatureModal.classList.add('hidden');
    currentMode = 'draw-signature';
    clickOverlay.classList.remove('hidden');
    showStatus('Click on PDF to place signature', 'green');
  });
  
  // PDF click handler
  clickOverlay.addEventListener('click', function(e) {
    const rect = clickOverlay.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    if (currentMode === 'text') {
      addText(x, y, textInput.value);
    } else if (currentMode === 'type-signature') {
      addTypedSignature(x, y, typedSig.value);
    } else if (currentMode === 'draw-signature') {
      addDrawnSignature(x, y);
    }
  });
  
  function addText(x, y, text) {
    fetch('<%= add_text_pdf_document_path(@pdf_document) %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ x: x, y: y, text: text, page: 0 })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        showStatus('Text added! Download to see changes.', 'green');
        textInput.value = '';
        resetMode();
      } else {
        showStatus('Error: ' + data.message, 'red');
      }
    });
  }
  
  function addTypedSignature(x, y, name) {
    // Create typed signature canvas
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = 300;
    tempCanvas.height = 80;
    const tempCtx = tempCanvas.getContext('2d');
    tempCtx.font = 'italic 24px cursive';
    tempCtx.fillText(name, 10, 50);
    
    const signatureData = tempCanvas.toDataURL();
    
    fetch('<%= add_signature_pdf_document_path(@pdf_document) %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ x: x, y: y, signature_data: signatureData, page: 0 })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        showStatus('Signature added! Download to see changes.', 'green');
        typedSig.value = '';
        resetMode();
      } else {
        showStatus('Error: ' + data.message, 'red');
      }
    });
  }
  
  function addDrawnSignature(x, y) {
    const signatureData = signatureCanvas.toDataURL();
    
    fetch('<%= add_signature_pdf_document_path(@pdf_document) %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ x: x, y: y, signature_data: signatureData, page: 0 })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        showStatus('Signature added! Download to see changes.', 'green');
        resetMode();
      } else {
        showStatus('Error: ' + data.message, 'red');
      }
    });
  }
  
  function resetMode() {
    currentMode = null;
    clickOverlay.classList.add('hidden');
  }
  
  function showStatus(message, color) {
    status.textContent = message;
    status.className = `mt-4 p-2 rounded text-white bg-${color}-500`;
    status.classList.remove('hidden');
    setTimeout(() => status.classList.add('hidden'), 3000);
  }
});
</script>

